package com.yidu.dangdang.category.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.yidu.dangdang.category.dao.CategoryDao;
import com.yidu.dangdang.category.domain.Category;
import com.yidu.dangdang.util.DBUtil;



public class CategoryDaoImpl implements CategoryDao {

	
	/**
	 * 删除分类
	 * @param categoryId 分类编号
	 * @return 受影响行数
	 */
	public int removeCategory(String categoryId) {
		int count = 0;
		Connection con = DBUtil.getConnection();
		PreparedStatement sta = null;
		String sql = "delete category where categoryId = ?";

		try {
			sta = con.prepareStatement(sql);
			sta.setString(1, categoryId);
			count = sta.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeAll(null, sta, con);
		}

		return count;
	}

	/**
	 * 修改分类
	 * 
	 * @param category 分类对象
	 * @return 受影响行数
	 */
	public int updateCategory(Category category) {
		int count = 0;
		Connection con = DBUtil.getConnection();
		PreparedStatement sta = null;
		String sql = "update category set categoryName = ?, parentId = ?, describe = ? where categoryId = ?";

		try {
			sta = con.prepareStatement(sql);
			sta.setString(1, category.getCategoryName());
			sta.setString(2, category.getParentId());
			sta.setString(3, category.getDescribe());
			sta.setString(4, category.getCategoryId());
			count = sta.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeAll(null, sta, con);
		}

		return count;
	}

	@Override
	public int addCategory(Category category) {
		int count = 0;
		Connection con = DBUtil.getConnection();
		PreparedStatement sta = null;
		String sql = "insert into category values(?,?,?,?)";

		try {
			sta = con.prepareStatement(sql);
			sta.setString(1, category.getCategoryId());
			sta.setString(2, category.getCategoryName());
			sta.setString(3, category.getParentId());
			sta.setString(4, category.getDescribe());
			
			count = sta.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeAll(null, sta, con);
		}

		return count;
	}

	@Override
	public List<Category> findAll() {
		List<Category> categorys=new ArrayList<Category>();
		ResultSet res = null;
		Connection con = DBUtil.getConnection();
		PreparedStatement sta = null;
		String sql = "select * from category";

		try {
			sta = con.prepareStatement(sql);
			
			res=sta.executeQuery();
			
			while(res.next()){
				Category category = new Category();
				category.setCategoryId(res.getString(1));
				category.setCategoryName(res.getString(2));
				category.setParentId(res.getString(3));
				category.setDescribe(res.getString(4));
				categorys.add(category);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeAll(null, sta, con);
		}

		return categorys;
	}

	@Override
	public List<Category> findCategories(String parentId) {
		List<Category> categorys=new ArrayList<Category>();
		ResultSet res = null;
		Connection con = DBUtil.getConnection();
		PreparedStatement sta = null;
		String sql = "select * from category where parentId = ? ";

		try {
			sta = con.prepareStatement(sql);
			sta.setString(1, parentId);
			res=sta.executeQuery();
			
			while(res.next()){
				Category category = new Category();
				category.setCategoryId(res.getString(1));
				category.setCategoryName(res.getString(2));
				category.setParentId(res.getString(3));
				category.setDescribe(res.getString(4));
				categorys.add(category);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeAll(null, sta, con);
		}

		return categorys;
	}

	@Override
	public boolean hasChildren(String categoryId) {
		
		Connection con = DBUtil.getConnection();
		PreparedStatement sta = null;
		ResultSet res = null;
		try {
			String sql = "select categoryId from category where parentId= ?";
			sta= con.prepareStatement(sql);
			sta.setString(1, categoryId);
			res = sta.executeQuery();
			while(res.next()){
				return true;
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}finally{
			DBUtil.closeAll(res, sta, con);
		}
		
		return false;
		
		
	}

	@Override
	public List<Category> findCateByLevel(String level, String cateName) {
		List<Category> categorys=new ArrayList<Category>();
		ResultSet res = null;
		Connection con = DBUtil.getConnection();
		PreparedStatement sta = null;
		String firSql = "select * from category where parentId = ? ";
		String secSql = "select * from category where categroyId in (select categroyId from category where parentId = ? )";
        String thiSql = "select * from categroy where categoryId in (select categroyId from category where categroyId in (select categroyId from category where parentId = ? ))";
		
		try {
			if (level.equals("level1")) {
				sta = con.prepareStatement(firSql);
			} else if(level.equals("level2")){
				sta = con.prepareStatement(secSql);
			}else{
				sta = con.prepareStatement(thiSql);
			}
			
			if(cateName!=null&&!(cateName.equals(""))){
				sta.setString(1, cateName);
			}
			
			res=sta.executeQuery();
			
			while(res.next()){
				Category category = new Category();
				category.setCategoryId(res.getString(1));
				category.setCategoryName(res.getString(2));
				category.setParentId(res.getString(3));
				category.setDescribe(res.getString(4));
				categorys.add(category);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			DBUtil.closeAll(null, sta, con);
		}

		return categorys;
	}

	
	
	
}
